// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: service/v1/service.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LockyServiceClient is the client API for LockyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LockyServiceClient interface {
	AskVote(ctx context.Context, in *AskVoteRequest, opts ...grpc.CallOption) (*AskVoteResponse, error)
	AskHealth(ctx context.Context, in *AskHealthRequest, opts ...grpc.CallOption) (*AskHealthResponse, error)
}

type lockyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLockyServiceClient(cc grpc.ClientConnInterface) LockyServiceClient {
	return &lockyServiceClient{cc}
}

func (c *lockyServiceClient) AskVote(ctx context.Context, in *AskVoteRequest, opts ...grpc.CallOption) (*AskVoteResponse, error) {
	out := new(AskVoteResponse)
	err := c.cc.Invoke(ctx, "/service.v1.LockyService/AskVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lockyServiceClient) AskHealth(ctx context.Context, in *AskHealthRequest, opts ...grpc.CallOption) (*AskHealthResponse, error) {
	out := new(AskHealthResponse)
	err := c.cc.Invoke(ctx, "/service.v1.LockyService/AskHealth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LockyServiceServer is the server API for LockyService service.
// All implementations must embed UnimplementedLockyServiceServer
// for forward compatibility
type LockyServiceServer interface {
	AskVote(context.Context, *AskVoteRequest) (*AskVoteResponse, error)
	AskHealth(context.Context, *AskHealthRequest) (*AskHealthResponse, error)
	mustEmbedUnimplementedLockyServiceServer()
}

// UnimplementedLockyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLockyServiceServer struct {
}

func (UnimplementedLockyServiceServer) AskVote(context.Context, *AskVoteRequest) (*AskVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AskVote not implemented")
}
func (UnimplementedLockyServiceServer) AskHealth(context.Context, *AskHealthRequest) (*AskHealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AskHealth not implemented")
}
func (UnimplementedLockyServiceServer) mustEmbedUnimplementedLockyServiceServer() {}

// UnsafeLockyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LockyServiceServer will
// result in compilation errors.
type UnsafeLockyServiceServer interface {
	mustEmbedUnimplementedLockyServiceServer()
}

func RegisterLockyServiceServer(s grpc.ServiceRegistrar, srv LockyServiceServer) {
	s.RegisterService(&LockyService_ServiceDesc, srv)
}

func _LockyService_AskVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AskVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LockyServiceServer).AskVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.v1.LockyService/AskVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LockyServiceServer).AskVote(ctx, req.(*AskVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LockyService_AskHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AskHealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LockyServiceServer).AskHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.v1.LockyService/AskHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LockyServiceServer).AskHealth(ctx, req.(*AskHealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LockyService_ServiceDesc is the grpc.ServiceDesc for LockyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LockyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.v1.LockyService",
	HandlerType: (*LockyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AskVote",
			Handler:    _LockyService_AskVote_Handler,
		},
		{
			MethodName: "AskHealth",
			Handler:    _LockyService_AskHealth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/v1/service.proto",
}
